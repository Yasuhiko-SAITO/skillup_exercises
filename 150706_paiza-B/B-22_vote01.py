#-------------------------------------------------------------------------------
# -*- coding: utf-8 -*-
# 選挙の演説によって支持数が変化する時、最も支持者が多い立候補者は誰か？
#
# 【ルール】
# M人の立候補者が、有権者N人の地域で、総計K回演説をする。
# 各立候補者は1 ~ M番目までの番号が振られている。
# 演説前は、どの立候補者も支持者は0とする。
# 立候補者一人あたりの演説回数は、0以上である(0回も含む)。
# 演説するたびに以下の支持者が加わる。
# (1)支持者なしの有権者から1人
# (2)他の各立候補者の支持者から1人ずつ(ただし、支持者0の場合は減ることはない)
# 例えば、立候補者A, B, Cとし、
# [A支持者, B支持者, C支持者, 支持者なし] = [2, 1, 0, 1]の時に、
# Cが演説した場合は、[1, 0, 3, 0]となる。
#
# 【入力】
# M N K     立候補者M人、有権者N人、総計演説K回
# a_1       立候補番号a_1番目
# a_2       立候補番号a_2番目
# ...
# a_K       立候補番号a_K番目
#
#   ただし、1 <= M, N, K <= 100、1 <= a_i <= M
#
# 【出力】
# 最も支持者が多い立候補者の番号を出力せよ。
# 複数いる場合は、番号の小さい順から改行区切りで全て出力せよ。
#
# 【入力例】
# 2 100 4
# 2
# 2
# 2
# 1
#
# 【出力例】
# 1
# 2
#
#-------------------------------------------------------------------------------

# 【方針】
# 演説毎に現在の支持者数を変動させる。処理に時間がかかりそうであまりやりたくないが。
# 支持者数は、立候補番号とインデックスを対応させたリストで管理する。
# その後、最も支持者数が多いインデックスを割り出して、
# そのインデックスを回答リストに加える。

first_inp = map(int, raw_input().split(" "))
candidate_num = first_inp[0]        # 立候補者数M人
voter = first_inp[1]                # 有権者数N人
psn_num = first_inp[2]              # 総演説数K回

# 支持者リスト。立候補番号とインデックスを対応させるため、
# インデックス0には-1を入れる。
voter_list = [-1] + ([0] * candidate_num)


# 演説による支持者変動の処理
# 非演説者の支持者数を一群ずつチェックして、支持者数を変動させる
for psn_times in range(psn_num):
    psn_cdd = int(raw_input())      # 演説している立候補者present_canditate

    # 有権者数Kを支持者なし群とみなして、その群が0じゃない場合
    if voter != 0:
        voter -= 1
        voter_list[psn_cdd] += 1

    # 演説している立候補者以外の立候補者のリストを作成する。
    # 例えば3人の立候補者がいて、1番が演説している時、
    # このリストは[2, 3]となる。
    check_list = range(1, psn_cdd) + range(psn_cdd + 1 , candidate_num + 1)
    for i in check_list:
        # 非演説者の支持者が1人でも居る時
        if voter_list[i] > 0:
            voter_list[i] -= 1
            voter_list[psn_cdd] += 1

# 支持者数が最大な立候補者が複数いる場合の処理。
# そのインデックスが最も小さい立候補者の番号を回答リストに加えたあと、
# その立候補者の支持者数を変化させる。
# removeで取り除くと、立候補番号とインデックスがずれるため、数値を変化させる。
ans_list = []
while voter_list.count(max(voter_list)) != 1:
    ans_list.append(voter_list.index(max(voter_list)))
    # 支持者数の数値変化は、とりあえず負値にしておく。特に意味は無い。
    voter_list[voter_list.index(max(voter_list))] = (-1) * max(voter_list)
else:
    ans_list.append(voter_list.index(max(voter_list)))

print "\n".join(map(str, ans_list))

