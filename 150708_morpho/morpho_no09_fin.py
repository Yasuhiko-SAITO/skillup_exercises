#-------------------------------------------------------------------------------
# -*- coding: utf-8 -*-
# 株式会社モルフォ　新卒採用チャレンジ問題No.9
# http://www.morphoinc.com/careers/challengeTest.html
# 1 ~ 4^N まで全ての数を4進数表記する。その際の"3"の個数を出力せよ。
#
# 【入力】
# N     指数N
#
#   0 <= N <= 30
#
# 【出力】
# 全ての4進数表記に現れる、"3"の個数を、数値で出力せよ。
#
# 【入力例1】
# 2
#
# 【出力例1】
# 8
#
# 【入力例2】
# 30
#
# 【出力例2】
# 8646911284551352320
#
#-------------------------------------------------------------------------------

# 【方針】
#   4^Nを4進数表記すると、[0, 0, ..., 0, 1](ただし長さN + 1)と表せる。
# すなわち、0 ~ (4^N - 1) までの数を4進数で表記するということは、
# [□, □, ..., □]とN個並んだ箱の中に、0 ~ 3のいずれかの数値を入れることと等しい。
#   ここで、3を入れる箱の個数をi個とした場合を考えてみる(1 <= i <= N <= 30)。
# この場合の組み合わせ通り数は、
# N個の箱からi個選んで3を入れるためC(N, i)通り、
# その他の箱には0 ~ 2のいずれかを入れるため3通りであり、
# その他の箱の個数は(N - i)個のため3^(N - i)通りであることから、
# C(N, i) * 3^(N - i)通りと言える。
#   すなわち、i = 1 ~ 30までの各場合の組み合わせ通りを算出し、
# それぞれの場合での3の個数を算出して加算していけば、
# 全ての4進数表記に現れる"3"の総数を算出できる。

# 階乗の計算のため、mathをインポート
import math

def morpho_threecount(N):

    threeCountNum = 0
    for three_num_is in range(1, N + 1):
        # 3が入る組み合わせを算出する。C(N, three_num_is)のため、
        # 分子にN!、分母にthree_num_is! * (N - three_num_is)!。
        three_combination = (math.factorial(N)) / \
            (math.factorial(three_num_is) * math.factorial(N - three_num_is))
        # 3以外の数値は3通り、その数値が入る箱は(N - three_num_is)個、
        # つまり3以外の数値が入る組み合わせ通りは、3^(N - three_num_is)通り。
        non_three_ways = 3 ** (N - three_num_is)

        # (3が入る箱の通り数) * (3以外が入る箱の通り数) * (3の個数)
        threeCountNum += three_combination * non_three_ways * three_num_is

    return threeCountNum

print u"4^2までに'3'が現れる回数は、", morpho_threecount(2)
print u"4^30までに'3'が現れる回数は、", morpho_threecount(30)